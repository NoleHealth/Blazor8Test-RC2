@page "/authentication/login"
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject ILogger<Login> Logger
@inject ServerNavigationManager NavigationManager

@using BlazorApp.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

<PageTitle>Login</PageTitle>

<h1>Log in</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Model" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <InputText id="username" @bind-Value="Model.Username" class="form-control" />
                <ValidationMessage For="() => Model.Username" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText type="password" id="password" @bind-Value="Model.Password" class="form-control" />
                <ValidationMessage For="() => Model.Password" class="text-danger" />
            </div>
             <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox id="rememberMe" @bind-Value="Model.RememberMe"  class="form-check-input" />
                    <label class="form-check-label" for="rememberMe">
                        Remember me
                    </label>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Log in</button>
        </EditForm>
    </div>
</div>

<div>
    @if (movieAdded)
    {
        <span>
            Movie was added.
        </span>
    }
</div>

@code {

    [SupplyParameterFromForm]
    public LoginModel Model { get; set; } = new();

    private bool movieAdded = false;

    public async Task LoginUser()
    {
    
    // Require the user to have a confirmed email before they can log on.
    var user = await UserManager.FindByNameAsync(Model.Username!);
    if (user != null)
    {
        /*
       if (!await UserManager.IsEmailConfirmedAsync(user.Id))
       {
          ViewBag.errorMessage = "You must have a confirmed email to log on.";
          return View("Error");
       } */
    }

    // This doesn't count login failures towards account lockout
    // To enable password failures to trigger account lockout, change to shouldLockout: true
    var result = await SignInManager.PasswordSignInAsync(Model.Username!, Model.Password!, Model.RememberMe, lockoutOnFailure: false);
    if (result.Succeeded)
    {
        NavigationManager.NavigateTo("/");

        /*
        case SignInStatus.LockedOut:
            return View("Lockout");
        case SignInStatus.RequiresVerification:
            return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
        case SignInStatus.Failure:
        default:
            ModelState.AddModelError("", "Invalid login attempt.");
            return View(model);
            */
        }
    }

    public class LoginModel 
    {
        [Required]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }

        public bool RememberMe { get; set; }
    }
}